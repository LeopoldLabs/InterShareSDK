// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(InterShareSDKFFI)
    import InterShareSDKFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_intershare_sdk_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_intershare_sdk_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterInt32: FfiConverterPrimitive {
    typealias FfiType = Int32
    typealias SwiftType = Int32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int32, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return try Data(readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public protocol ConnectionRequestProtocol: AnyObject {
    func accept() -> [String]?

    func cancel()

    func decline()

    func getClipboardIntent() -> ClipboardTransferIntent?

    func getFileTransferIntent() -> FileTransferIntent?

    func getIntentType() -> ConnectionIntentType

    func getSender() -> Device

    func isLink() -> Bool

    func setProgressDelegate(delegate: ReceiveProgressDelegate)

    func updateProgress(newState: ReceiveProgressState)
}

open class ConnectionRequest:
    ConnectionRequestProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_intershare_sdk_fn_clone_connectionrequest(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_intershare_sdk_fn_free_connectionrequest(pointer, $0) }
    }

    open func accept() -> [String]? {
        return try! FfiConverterOptionSequenceString.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_connectionrequest_accept(self.uniffiClonePointer(), $0)
        })
    }

    open func cancel() { try! rustCall {
        uniffi_intershare_sdk_fn_method_connectionrequest_cancel(self.uniffiClonePointer(), $0)
    }
    }

    open func decline() { try! rustCall {
        uniffi_intershare_sdk_fn_method_connectionrequest_decline(self.uniffiClonePointer(), $0)
    }
    }

    open func getClipboardIntent() -> ClipboardTransferIntent? {
        return try! FfiConverterOptionTypeClipboardTransferIntent.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_connectionrequest_get_clipboard_intent(self.uniffiClonePointer(), $0)
        })
    }

    open func getFileTransferIntent() -> FileTransferIntent? {
        return try! FfiConverterOptionTypeFileTransferIntent.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_connectionrequest_get_file_transfer_intent(self.uniffiClonePointer(), $0)
        })
    }

    open func getIntentType() -> ConnectionIntentType {
        return try! FfiConverterTypeConnectionIntentType.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_connectionrequest_get_intent_type(self.uniffiClonePointer(), $0)
        })
    }

    open func getSender() -> Device {
        return try! FfiConverterTypeDevice.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_connectionrequest_get_sender(self.uniffiClonePointer(), $0)
        })
    }

    open func isLink() -> Bool {
        return try! FfiConverterBool.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_connectionrequest_is_link(self.uniffiClonePointer(), $0)
        })
    }

    open func setProgressDelegate(delegate: ReceiveProgressDelegate) { try! rustCall {
        uniffi_intershare_sdk_fn_method_connectionrequest_set_progress_delegate(self.uniffiClonePointer(),
                                                                                FfiConverterCallbackInterfaceReceiveProgressDelegate.lower(delegate), $0)
    }
    }

    open func updateProgress(newState: ReceiveProgressState) { try! rustCall {
        uniffi_intershare_sdk_fn_method_connectionrequest_update_progress(self.uniffiClonePointer(),
                                                                          FfiConverterTypeReceiveProgressState.lower(newState), $0)
    }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectionRequest: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ConnectionRequest

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ConnectionRequest {
        return ConnectionRequest(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ConnectionRequest) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionRequest {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ConnectionRequest, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectionRequest_lift(_ pointer: UnsafeMutableRawPointer) throws -> ConnectionRequest {
    return try FfiConverterTypeConnectionRequest.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectionRequest_lower(_ value: ConnectionRequest) -> UnsafeMutableRawPointer {
    return FfiConverterTypeConnectionRequest.lower(value)
}

public protocol InternalDiscoveryProtocol: AnyObject {
    func addBleImplementation(implementation: BleDiscoveryImplementationDelegate)

    func addDiscoveredDevice(device: Device)

    func getDevices() -> [Device]

    func parseDiscoveryMessage(data: Data, bleUuid: String?)

    func removeDiscoveredDevice(deviceId: String)

    func start()

    func stop()
}

open class InternalDiscovery:
    InternalDiscoveryProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_intershare_sdk_fn_clone_internaldiscovery(self.pointer, $0) }
    }

    public convenience init(delegate: DeviceListUpdateDelegate?) throws {
        let pointer =
            try rustCallWithError(FfiConverterTypeDiscoverySetupError.lift) {
                uniffi_intershare_sdk_fn_constructor_internaldiscovery_new(
                    FfiConverterOptionCallbackInterfaceDeviceListUpdateDelegate.lower(delegate), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_intershare_sdk_fn_free_internaldiscovery(pointer, $0) }
    }

    open func addBleImplementation(implementation: BleDiscoveryImplementationDelegate) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internaldiscovery_add_ble_implementation(self.uniffiClonePointer(),
                                                                                 FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.lower(implementation), $0)
    }
    }

    open func addDiscoveredDevice(device: Device) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internaldiscovery_add_discovered_device(self.uniffiClonePointer(),
                                                                                FfiConverterTypeDevice.lower(device), $0)
    }
    }

    open func getDevices() -> [Device] {
        return try! FfiConverterSequenceTypeDevice.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_internaldiscovery_get_devices(self.uniffiClonePointer(), $0)
        })
    }

    open func parseDiscoveryMessage(data: Data, bleUuid: String?) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internaldiscovery_parse_discovery_message(self.uniffiClonePointer(),
                                                                                  FfiConverterData.lower(data),
                                                                                  FfiConverterOptionString.lower(bleUuid), $0)
    }
    }

    open func removeDiscoveredDevice(deviceId: String) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internaldiscovery_remove_discovered_device(self.uniffiClonePointer(),
                                                                                   FfiConverterString.lower(deviceId), $0)
    }
    }

    open func start() { try! rustCall {
        uniffi_intershare_sdk_fn_method_internaldiscovery_start(self.uniffiClonePointer(), $0)
    }
    }

    open func stop() { try! rustCall {
        uniffi_intershare_sdk_fn_method_internaldiscovery_stop(self.uniffiClonePointer(), $0)
    }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeInternalDiscovery: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = InternalDiscovery

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalDiscovery {
        return InternalDiscovery(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: InternalDiscovery) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InternalDiscovery {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: InternalDiscovery, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeInternalDiscovery_lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalDiscovery {
    return try FfiConverterTypeInternalDiscovery.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeInternalDiscovery_lower(_ value: InternalDiscovery) -> UnsafeMutableRawPointer {
    return FfiConverterTypeInternalDiscovery.lower(value)
}

public protocol InternalNearbyServerProtocol: AnyObject {
    func addBluetoothImplementation(implementation: BleServerImplementationDelegate)

    func addL2CapClient(delegate: L2CapDelegate)

    func changeDevice(newDevice: Device)

    func getAdvertisementData() async -> Data

    func getCurrentIp() -> String?

    func getDeviceName() -> String?

    func handleIncomingConnection(nativeStreamHandle: NativeStreamDelegate)

    /**
     * https://share.intershare.app?id=hgf8o47fdsb394mv385&ip=192.168.12.13&port=5200&device_id=9A403351-A926-4D1C-855F-432A6ED51E0E&protocol_version=1
     */
    func requestDownload(link: String) async throws

    func restartServer() async

    func setBluetoothLeDetails(bleInfo: BluetoothLeConnectionInfo)

    func setTcpDetails(tcpInfo: TcpConnectionInfo)

    func shareFiles(filePaths: [String], allowConvenienceShare: Bool) async -> ShareStore

    func shareText(text: String, allowConvenienceShare: Bool) async -> ShareStore

    func start() async

    func stop() async
}

open class InternalNearbyServer:
    InternalNearbyServerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_intershare_sdk_fn_clone_internalnearbyserver(self.pointer, $0) }
    }

    public convenience init(myDevice: Device, fileStorage: String, delegate: NearbyConnectionDelegate?) {
        let pointer =
            try! rustCall {
                uniffi_intershare_sdk_fn_constructor_internalnearbyserver_new(
                    FfiConverterTypeDevice.lower(myDevice),
                    FfiConverterString.lower(fileStorage),
                    FfiConverterOptionCallbackInterfaceNearbyConnectionDelegate.lower(delegate), $0
                )
            }
        self.init(unsafeFromRawPointer: pointer)
    }

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_intershare_sdk_fn_free_internalnearbyserver(pointer, $0) }
    }

    open func addBluetoothImplementation(implementation: BleServerImplementationDelegate) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internalnearbyserver_add_bluetooth_implementation(self.uniffiClonePointer(),
                                                                                          FfiConverterCallbackInterfaceBleServerImplementationDelegate.lower(implementation), $0)
    }
    }

    open func addL2CapClient(delegate: L2CapDelegate) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internalnearbyserver_add_l2_cap_client(self.uniffiClonePointer(),
                                                                               FfiConverterCallbackInterfaceL2CapDelegate.lower(delegate), $0)
    }
    }

    open func changeDevice(newDevice: Device) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internalnearbyserver_change_device(self.uniffiClonePointer(),
                                                                           FfiConverterTypeDevice.lower(newDevice), $0)
    }
    }

    open func getAdvertisementData() async -> Data {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_intershare_sdk_fn_method_internalnearbyserver_get_advertisement_data(
                        self.uniffiClonePointer()
                    )
                },
                pollFunc: ffi_intershare_sdk_rust_future_poll_rust_buffer,
                completeFunc: ffi_intershare_sdk_rust_future_complete_rust_buffer,
                freeFunc: ffi_intershare_sdk_rust_future_free_rust_buffer,
                liftFunc: FfiConverterData.lift,
                errorHandler: nil
            )
    }

    open func getCurrentIp() -> String? {
        return try! FfiConverterOptionString.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_internalnearbyserver_get_current_ip(self.uniffiClonePointer(), $0)
        })
    }

    open func getDeviceName() -> String? {
        return try! FfiConverterOptionString.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_internalnearbyserver_get_device_name(self.uniffiClonePointer(), $0)
        })
    }

    open func handleIncomingConnection(nativeStreamHandle: NativeStreamDelegate) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internalnearbyserver_handle_incoming_connection(self.uniffiClonePointer(),
                                                                                        FfiConverterCallbackInterfaceNativeStreamDelegate.lower(nativeStreamHandle), $0)
    }
    }

    /**
     * https://share.intershare.app?id=hgf8o47fdsb394mv385&ip=192.168.12.13&port=5200&device_id=9A403351-A926-4D1C-855F-432A6ED51E0E&protocol_version=1
     */
    open func requestDownload(link: String) async throws {
        return
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_intershare_sdk_fn_method_internalnearbyserver_request_download(
                        self.uniffiClonePointer(),
                        FfiConverterString.lower(link)
                    )
                },
                pollFunc: ffi_intershare_sdk_rust_future_poll_void,
                completeFunc: ffi_intershare_sdk_rust_future_complete_void,
                freeFunc: ffi_intershare_sdk_rust_future_free_void,
                liftFunc: { $0 },
                errorHandler: FfiConverterTypeRequestConvenienceShareErrors.lift
            )
    }

    open func restartServer() async {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_intershare_sdk_fn_method_internalnearbyserver_restart_server(
                        self.uniffiClonePointer()
                    )
                },
                pollFunc: ffi_intershare_sdk_rust_future_poll_void,
                completeFunc: ffi_intershare_sdk_rust_future_complete_void,
                freeFunc: ffi_intershare_sdk_rust_future_free_void,
                liftFunc: { $0 },
                errorHandler: nil
            )
    }

    open func setBluetoothLeDetails(bleInfo: BluetoothLeConnectionInfo) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internalnearbyserver_set_bluetooth_le_details(self.uniffiClonePointer(),
                                                                                      FfiConverterTypeBluetoothLeConnectionInfo.lower(bleInfo), $0)
    }
    }

    open func setTcpDetails(tcpInfo: TcpConnectionInfo) { try! rustCall {
        uniffi_intershare_sdk_fn_method_internalnearbyserver_set_tcp_details(self.uniffiClonePointer(),
                                                                             FfiConverterTypeTcpConnectionInfo.lower(tcpInfo), $0)
    }
    }

    open func shareFiles(filePaths: [String], allowConvenienceShare: Bool) async -> ShareStore {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_intershare_sdk_fn_method_internalnearbyserver_share_files(
                        self.uniffiClonePointer(),
                        FfiConverterSequenceString.lower(filePaths), FfiConverterBool.lower(allowConvenienceShare)
                    )
                },
                pollFunc: ffi_intershare_sdk_rust_future_poll_pointer,
                completeFunc: ffi_intershare_sdk_rust_future_complete_pointer,
                freeFunc: ffi_intershare_sdk_rust_future_free_pointer,
                liftFunc: FfiConverterTypeShareStore.lift,
                errorHandler: nil
            )
    }

    open func shareText(text: String, allowConvenienceShare: Bool) async -> ShareStore {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_intershare_sdk_fn_method_internalnearbyserver_share_text(
                        self.uniffiClonePointer(),
                        FfiConverterString.lower(text), FfiConverterBool.lower(allowConvenienceShare)
                    )
                },
                pollFunc: ffi_intershare_sdk_rust_future_poll_pointer,
                completeFunc: ffi_intershare_sdk_rust_future_complete_pointer,
                freeFunc: ffi_intershare_sdk_rust_future_free_pointer,
                liftFunc: FfiConverterTypeShareStore.lift,
                errorHandler: nil
            )
    }

    open func start() async {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_intershare_sdk_fn_method_internalnearbyserver_start(
                        self.uniffiClonePointer()
                    )
                },
                pollFunc: ffi_intershare_sdk_rust_future_poll_void,
                completeFunc: ffi_intershare_sdk_rust_future_complete_void,
                freeFunc: ffi_intershare_sdk_rust_future_free_void,
                liftFunc: { $0 },
                errorHandler: nil
            )
    }

    open func stop() async {
        return
            try! await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_intershare_sdk_fn_method_internalnearbyserver_stop(
                        self.uniffiClonePointer()
                    )
                },
                pollFunc: ffi_intershare_sdk_rust_future_poll_void,
                completeFunc: ffi_intershare_sdk_rust_future_complete_void,
                freeFunc: ffi_intershare_sdk_rust_future_free_void,
                liftFunc: { $0 },
                errorHandler: nil
            )
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeInternalNearbyServer: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = InternalNearbyServer

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalNearbyServer {
        return InternalNearbyServer(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: InternalNearbyServer) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InternalNearbyServer {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: InternalNearbyServer, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeInternalNearbyServer_lift(_ pointer: UnsafeMutableRawPointer) throws -> InternalNearbyServer {
    return try FfiConverterTypeInternalNearbyServer.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeInternalNearbyServer_lower(_ value: InternalNearbyServer) -> UnsafeMutableRawPointer {
    return FfiConverterTypeInternalNearbyServer.lower(value)
}

public protocol ShareStoreProtocol: AnyObject {
    func generateLink() -> String?

    func generateQrCode(darkMode: Bool) -> [UInt8]?

    func sendTo(receiver: Device, progressDelegate: SendProgressDelegate?) async throws
}

open class ShareStore:
    ShareStoreProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_intershare_sdk_fn_clone_sharestore(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_intershare_sdk_fn_free_sharestore(pointer, $0) }
    }

    open func generateLink() -> String? {
        return try! FfiConverterOptionString.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_sharestore_generate_link(self.uniffiClonePointer(), $0)
        })
    }

    open func generateQrCode(darkMode: Bool) -> [UInt8]? {
        return try! FfiConverterOptionSequenceUInt8.lift(try! rustCall {
            uniffi_intershare_sdk_fn_method_sharestore_generate_qr_code(self.uniffiClonePointer(),
                                                                        FfiConverterBool.lower(darkMode), $0)
        })
    }

    open func sendTo(receiver: Device, progressDelegate: SendProgressDelegate?) async throws {
        return
            try await uniffiRustCallAsync(
                rustFutureFunc: {
                    uniffi_intershare_sdk_fn_method_sharestore_send_to(
                        self.uniffiClonePointer(),
                        FfiConverterTypeDevice.lower(receiver), FfiConverterOptionCallbackInterfaceSendProgressDelegate.lower(progressDelegate)
                    )
                },
                pollFunc: ffi_intershare_sdk_rust_future_poll_void,
                completeFunc: ffi_intershare_sdk_rust_future_complete_void,
                freeFunc: ffi_intershare_sdk_rust_future_free_void,
                liftFunc: { $0 },
                errorHandler: FfiConverterTypeConnectErrors.lift
            )
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeShareStore: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ShareStore

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ShareStore {
        return ShareStore(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ShareStore) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ShareStore {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ShareStore, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeShareStore_lift(_ pointer: UnsafeMutableRawPointer) throws -> ShareStore {
    return try FfiConverterTypeShareStore.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeShareStore_lower(_ value: ShareStore) -> UnsafeMutableRawPointer {
    return FfiConverterTypeShareStore.lower(value)
}

public struct BluetoothLeConnectionInfo {
    public var uuid: String
    public var psm: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uuid: String, psm: UInt32) {
        self.uuid = uuid
        self.psm = psm
    }
}

extension BluetoothLeConnectionInfo: Equatable, Hashable {
    public static func == (lhs: BluetoothLeConnectionInfo, rhs: BluetoothLeConnectionInfo) -> Bool {
        if lhs.uuid != rhs.uuid {
            return false
        }
        if lhs.psm != rhs.psm {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uuid)
        hasher.combine(psm)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeBluetoothLeConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BluetoothLeConnectionInfo {
        return
            try BluetoothLeConnectionInfo(
                uuid: FfiConverterString.read(from: &buf),
                psm: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: BluetoothLeConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uuid, into: &buf)
        FfiConverterUInt32.write(value.psm, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeBluetoothLeConnectionInfo_lift(_ buf: RustBuffer) throws -> BluetoothLeConnectionInfo {
    return try FfiConverterTypeBluetoothLeConnectionInfo.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeBluetoothLeConnectionInfo_lower(_ value: BluetoothLeConnectionInfo) -> RustBuffer {
    return FfiConverterTypeBluetoothLeConnectionInfo.lower(value)
}

public struct ClipboardTransferIntent {
    public var clipboardContent: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(clipboardContent: String) {
        self.clipboardContent = clipboardContent
    }
}

extension ClipboardTransferIntent: Equatable, Hashable {
    public static func == (lhs: ClipboardTransferIntent, rhs: ClipboardTransferIntent) -> Bool {
        if lhs.clipboardContent != rhs.clipboardContent {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(clipboardContent)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeClipboardTransferIntent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClipboardTransferIntent {
        return
            try ClipboardTransferIntent(
                clipboardContent: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: ClipboardTransferIntent, into buf: inout [UInt8]) {
        FfiConverterString.write(value.clipboardContent, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeClipboardTransferIntent_lift(_ buf: RustBuffer) throws -> ClipboardTransferIntent {
    return try FfiConverterTypeClipboardTransferIntent.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeClipboardTransferIntent_lower(_ value: ClipboardTransferIntent) -> RustBuffer {
    return FfiConverterTypeClipboardTransferIntent.lower(value)
}

public struct Device {
    public var id: String
    public var name: String
    public var deviceType: Int32
    public var protocolVersion: UInt32?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(id: String, name: String, deviceType: Int32, protocolVersion: UInt32? = nil) {
        self.id = id
        self.name = name
        self.deviceType = deviceType
        self.protocolVersion = protocolVersion
    }
}

extension Device: Equatable, Hashable {
    public static func == (lhs: Device, rhs: Device) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.name != rhs.name {
            return false
        }
        if lhs.deviceType != rhs.deviceType {
            return false
        }
        if lhs.protocolVersion != rhs.protocolVersion {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(name)
        hasher.combine(deviceType)
        hasher.combine(protocolVersion)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDevice: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Device {
        return
            try Device(
                id: FfiConverterString.read(from: &buf),
                name: FfiConverterString.read(from: &buf),
                deviceType: FfiConverterInt32.read(from: &buf),
                protocolVersion: FfiConverterOptionUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: Device, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterInt32.write(value.deviceType, into: &buf)
        FfiConverterOptionUInt32.write(value.protocolVersion, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDevice_lift(_ buf: RustBuffer) throws -> Device {
    return try FfiConverterTypeDevice.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDevice_lower(_ value: Device) -> RustBuffer {
    return FfiConverterTypeDevice.lower(value)
}

public struct FileTransferIntent {
    public var fileName: String?
    public var fileSize: UInt64
    public var fileCount: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(fileName: String?, fileSize: UInt64, fileCount: UInt64) {
        self.fileName = fileName
        self.fileSize = fileSize
        self.fileCount = fileCount
    }
}

extension FileTransferIntent: Equatable, Hashable {
    public static func == (lhs: FileTransferIntent, rhs: FileTransferIntent) -> Bool {
        if lhs.fileName != rhs.fileName {
            return false
        }
        if lhs.fileSize != rhs.fileSize {
            return false
        }
        if lhs.fileCount != rhs.fileCount {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fileName)
        hasher.combine(fileSize)
        hasher.combine(fileCount)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeFileTransferIntent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FileTransferIntent {
        return
            try FileTransferIntent(
                fileName: FfiConverterOptionString.read(from: &buf),
                fileSize: FfiConverterUInt64.read(from: &buf),
                fileCount: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: FileTransferIntent, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.fileName, into: &buf)
        FfiConverterUInt64.write(value.fileSize, into: &buf)
        FfiConverterUInt64.write(value.fileCount, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFileTransferIntent_lift(_ buf: RustBuffer) throws -> FileTransferIntent {
    return try FfiConverterTypeFileTransferIntent.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFileTransferIntent_lower(_ value: FileTransferIntent) -> RustBuffer {
    return FfiConverterTypeFileTransferIntent.lower(value)
}

public struct TcpConnectionInfo {
    public var hostname: String
    public var port: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(hostname: String, port: UInt32) {
        self.hostname = hostname
        self.port = port
    }
}

extension TcpConnectionInfo: Equatable, Hashable {
    public static func == (lhs: TcpConnectionInfo, rhs: TcpConnectionInfo) -> Bool {
        if lhs.hostname != rhs.hostname {
            return false
        }
        if lhs.port != rhs.port {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(hostname)
        hasher.combine(port)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTcpConnectionInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TcpConnectionInfo {
        return
            try TcpConnectionInfo(
                hostname: FfiConverterString.read(from: &buf),
                port: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: TcpConnectionInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.hostname, into: &buf)
        FfiConverterUInt32.write(value.port, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTcpConnectionInfo_lift(_ buf: RustBuffer) throws -> TcpConnectionInfo {
    return try FfiConverterTypeTcpConnectionInfo.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeTcpConnectionInfo_lower(_ value: TcpConnectionInfo) -> RustBuffer {
    return FfiConverterTypeTcpConnectionInfo.lower(value)
}

public enum ConnectErrors {
    case InvalidProtocolVersion
    case Unreachable
    case NoTextProvided
    case NoFilesProvided
    case FailedToGetConnectionDetails
    case Declined
    case FailedToGetTcpDetails
    case FailedToGetSocketAddress
    case FailedToOpenTcpStream(error: String
    )
    case FailedToEncryptStream(error: String
    )
    case FailedToDetermineFileSize(error: String
    )
    case FailedToGetTransferRequestResponse(error: String
    )
    case FailedToGetBleDetails
    case InternalBleHandlerNotAvailable
    case FailedToEstablishBleConnection
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectErrors: FfiConverterRustBuffer {
    typealias SwiftType = ConnectErrors

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectErrors {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .InvalidProtocolVersion
        case 2: return .Unreachable
        case 3: return .NoTextProvided
        case 4: return .NoFilesProvided
        case 5: return .FailedToGetConnectionDetails
        case 6: return .Declined
        case 7: return .FailedToGetTcpDetails
        case 8: return .FailedToGetSocketAddress
        case 9: return try .FailedToOpenTcpStream(
                error: FfiConverterString.read(from: &buf)
            )
        case 10: return try .FailedToEncryptStream(
                error: FfiConverterString.read(from: &buf)
            )
        case 11: return try .FailedToDetermineFileSize(
                error: FfiConverterString.read(from: &buf)
            )
        case 12: return try .FailedToGetTransferRequestResponse(
                error: FfiConverterString.read(from: &buf)
            )
        case 13: return .FailedToGetBleDetails
        case 14: return .InternalBleHandlerNotAvailable
        case 15: return .FailedToEstablishBleConnection

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectErrors, into buf: inout [UInt8]) {
        switch value {
        case .InvalidProtocolVersion:
            writeInt(&buf, Int32(1))

        case .Unreachable:
            writeInt(&buf, Int32(2))

        case .NoTextProvided:
            writeInt(&buf, Int32(3))

        case .NoFilesProvided:
            writeInt(&buf, Int32(4))

        case .FailedToGetConnectionDetails:
            writeInt(&buf, Int32(5))

        case .Declined:
            writeInt(&buf, Int32(6))

        case .FailedToGetTcpDetails:
            writeInt(&buf, Int32(7))

        case .FailedToGetSocketAddress:
            writeInt(&buf, Int32(8))

        case let .FailedToOpenTcpStream(error):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(error, into: &buf)

        case let .FailedToEncryptStream(error):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(error, into: &buf)

        case let .FailedToDetermineFileSize(error):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(error, into: &buf)

        case let .FailedToGetTransferRequestResponse(error):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(error, into: &buf)

        case .FailedToGetBleDetails:
            writeInt(&buf, Int32(13))

        case .InternalBleHandlerNotAvailable:
            writeInt(&buf, Int32(14))

        case .FailedToEstablishBleConnection:
            writeInt(&buf, Int32(15))
        }
    }
}

extension ConnectErrors: Equatable, Hashable {}

extension ConnectErrors: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ConnectionIntentType {
    case fileTransfer
    case clipboard
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectionIntentType: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionIntentType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionIntentType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .fileTransfer

        case 2: return .clipboard

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectionIntentType, into buf: inout [UInt8]) {
        switch value {
        case .fileTransfer:
            writeInt(&buf, Int32(1))

        case .clipboard:
            writeInt(&buf, Int32(2))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectionIntentType_lift(_ buf: RustBuffer) throws -> ConnectionIntentType {
    return try FfiConverterTypeConnectionIntentType.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectionIntentType_lower(_ value: ConnectionIntentType) -> RustBuffer {
    return FfiConverterTypeConnectionIntentType.lower(value)
}

extension ConnectionIntentType: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ConnectionMedium {
    case ble
    case wiFi
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectionMedium: FfiConverterRustBuffer {
    typealias SwiftType = ConnectionMedium

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionMedium {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .ble

        case 2: return .wiFi

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ConnectionMedium, into buf: inout [UInt8]) {
        switch value {
        case .ble:
            writeInt(&buf, Int32(1))

        case .wiFi:
            writeInt(&buf, Int32(2))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectionMedium_lift(_ buf: RustBuffer) throws -> ConnectionMedium {
    return try FfiConverterTypeConnectionMedium.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectionMedium_lower(_ value: ConnectionMedium) -> RustBuffer {
    return FfiConverterTypeConnectionMedium.lower(value)
}

extension ConnectionMedium: Equatable, Hashable {}

public enum DiscoverySetupError {
    case UnableToSetupUdp
    case UnableToSetupMdns
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiscoverySetupError: FfiConverterRustBuffer {
    typealias SwiftType = DiscoverySetupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiscoverySetupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .UnableToSetupUdp
        case 2: return .UnableToSetupMdns

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DiscoverySetupError, into buf: inout [UInt8]) {
        switch value {
        case .UnableToSetupUdp:
            writeInt(&buf, Int32(1))

        case .UnableToSetupMdns:
            writeInt(&buf, Int32(2))
        }
    }
}

extension DiscoverySetupError: Equatable, Hashable {}

extension DiscoverySetupError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ReceiveProgressState {
    case unknown
    case handshake
    case receiving(progress: Double
    )
    case extracting
    case cancelled
    case finished
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeReceiveProgressState: FfiConverterRustBuffer {
    typealias SwiftType = ReceiveProgressState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ReceiveProgressState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .unknown

        case 2: return .handshake

        case 3: return try .receiving(progress: FfiConverterDouble.read(from: &buf)
            )

        case 4: return .extracting

        case 5: return .cancelled

        case 6: return .finished

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ReceiveProgressState, into buf: inout [UInt8]) {
        switch value {
        case .unknown:
            writeInt(&buf, Int32(1))

        case .handshake:
            writeInt(&buf, Int32(2))

        case let .receiving(progress):
            writeInt(&buf, Int32(3))
            FfiConverterDouble.write(progress, into: &buf)

        case .extracting:
            writeInt(&buf, Int32(4))

        case .cancelled:
            writeInt(&buf, Int32(5))

        case .finished:
            writeInt(&buf, Int32(6))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeReceiveProgressState_lift(_ buf: RustBuffer) throws -> ReceiveProgressState {
    return try FfiConverterTypeReceiveProgressState.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeReceiveProgressState_lower(_ value: ReceiveProgressState) -> RustBuffer {
    return FfiConverterTypeReceiveProgressState.lower(value)
}

extension ReceiveProgressState: Equatable, Hashable {}

public enum RequestConvenienceShareErrors {
    case NotAValidLink
    case IncompatibleProtocolVersion
    case FailedToConnect(error: String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRequestConvenienceShareErrors: FfiConverterRustBuffer {
    typealias SwiftType = RequestConvenienceShareErrors

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RequestConvenienceShareErrors {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .NotAValidLink
        case 2: return .IncompatibleProtocolVersion
        case 3: return try .FailedToConnect(
                error: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RequestConvenienceShareErrors, into buf: inout [UInt8]) {
        switch value {
        case .NotAValidLink:
            writeInt(&buf, Int32(1))

        case .IncompatibleProtocolVersion:
            writeInt(&buf, Int32(2))

        case let .FailedToConnect(error):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(error, into: &buf)
        }
    }
}

extension RequestConvenienceShareErrors: Equatable, Hashable {}

extension RequestConvenienceShareErrors: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SendProgressState {
    case unknown
    case connecting
    case requesting
    case connectionMediumUpdate(medium: ConnectionMedium
    )
    case transferring(progress: Double
    )
    case cancelled
    case finished
    case declined
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSendProgressState: FfiConverterRustBuffer {
    typealias SwiftType = SendProgressState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SendProgressState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .unknown

        case 2: return .connecting

        case 3: return .requesting

        case 4: return try .connectionMediumUpdate(medium: FfiConverterTypeConnectionMedium.read(from: &buf)
            )

        case 5: return try .transferring(progress: FfiConverterDouble.read(from: &buf)
            )

        case 6: return .cancelled

        case 7: return .finished

        case 8: return .declined

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SendProgressState, into buf: inout [UInt8]) {
        switch value {
        case .unknown:
            writeInt(&buf, Int32(1))

        case .connecting:
            writeInt(&buf, Int32(2))

        case .requesting:
            writeInt(&buf, Int32(3))

        case let .connectionMediumUpdate(medium):
            writeInt(&buf, Int32(4))
            FfiConverterTypeConnectionMedium.write(medium, into: &buf)

        case let .transferring(progress):
            writeInt(&buf, Int32(5))
            FfiConverterDouble.write(progress, into: &buf)

        case .cancelled:
            writeInt(&buf, Int32(6))

        case .finished:
            writeInt(&buf, Int32(7))

        case .declined:
            writeInt(&buf, Int32(8))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSendProgressState_lift(_ buf: RustBuffer) throws -> SendProgressState {
    return try FfiConverterTypeSendProgressState.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSendProgressState_lower(_ value: SendProgressState) -> RustBuffer {
    return FfiConverterTypeSendProgressState.lower(value)
}

extension SendProgressState: Equatable, Hashable {}

public enum TransmissionSetupError {
    case UnableToStartTcpServer(error: String
    )
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeTransmissionSetupError: FfiConverterRustBuffer {
    typealias SwiftType = TransmissionSetupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TransmissionSetupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .UnableToStartTcpServer(
                error: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TransmissionSetupError, into buf: inout [UInt8]) {
        switch value {
        case let .UnableToStartTcpServer(error):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
        }
    }
}

extension TransmissionSetupError: Equatable, Hashable {}

extension TransmissionSetupError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum VersionCompatibility {
    case compatible
    case outdatedVersion
    case incompatibleNewVersion
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeVersionCompatibility: FfiConverterRustBuffer {
    typealias SwiftType = VersionCompatibility

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VersionCompatibility {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .compatible

        case 2: return .outdatedVersion

        case 3: return .incompatibleNewVersion

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: VersionCompatibility, into buf: inout [UInt8]) {
        switch value {
        case .compatible:
            writeInt(&buf, Int32(1))

        case .outdatedVersion:
            writeInt(&buf, Int32(2))

        case .incompatibleNewVersion:
            writeInt(&buf, Int32(3))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVersionCompatibility_lift(_ buf: RustBuffer) throws -> VersionCompatibility {
    return try FfiConverterTypeVersionCompatibility.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeVersionCompatibility_lower(_ value: VersionCompatibility) -> RustBuffer {
    return FfiConverterTypeVersionCompatibility.lower(value)
}

extension VersionCompatibility: Equatable, Hashable {}

public protocol BleDiscoveryImplementationDelegate: AnyObject {
    func startScanning()

    func stopScanning()
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceBleDiscoveryImplementationDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceBleDiscoveryImplementationDelegate = .init(
        startScanning: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.startScanning(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        stopScanning: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.stopScanning(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface BleDiscoveryImplementationDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitBleDiscoveryImplementationDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_blediscoveryimplementationdelegate(&UniffiCallbackInterfaceBleDiscoveryImplementationDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate {
    fileprivate static var handleMap = UniffiHandleMap<BleDiscoveryImplementationDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceBleDiscoveryImplementationDelegate: FfiConverter {
    typealias SwiftType = BleDiscoveryImplementationDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol BleServerImplementationDelegate: AnyObject {
    func startServer()

    func stopServer()
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceBleServerImplementationDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceBleServerImplementationDelegate = .init(
        startServer: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceBleServerImplementationDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.startServer(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        stopServer: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceBleServerImplementationDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.stopServer(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceBleServerImplementationDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface BleServerImplementationDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitBleServerImplementationDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_bleserverimplementationdelegate(&UniffiCallbackInterfaceBleServerImplementationDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceBleServerImplementationDelegate {
    fileprivate static var handleMap = UniffiHandleMap<BleServerImplementationDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceBleServerImplementationDelegate: FfiConverter {
    typealias SwiftType = BleServerImplementationDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol DeviceListUpdateDelegate: AnyObject {
    func deviceAdded(value: Device)

    func deviceRemoved(deviceId: String)
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceDeviceListUpdateDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceDeviceListUpdateDelegate = .init(
        deviceAdded: { (
            uniffiHandle: UInt64,
            value: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceDeviceListUpdateDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.deviceAdded(
                    value: FfiConverterTypeDevice.lift(value)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        deviceRemoved: { (
            uniffiHandle: UInt64,
            deviceId: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceDeviceListUpdateDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.deviceRemoved(
                    deviceId: FfiConverterString.lift(deviceId)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceDeviceListUpdateDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface DeviceListUpdateDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitDeviceListUpdateDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_devicelistupdatedelegate(&UniffiCallbackInterfaceDeviceListUpdateDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceDeviceListUpdateDelegate {
    fileprivate static var handleMap = UniffiHandleMap<DeviceListUpdateDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceDeviceListUpdateDelegate: FfiConverter {
    typealias SwiftType = DeviceListUpdateDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol L2CapDelegate: AnyObject {
    func openL2capConnection(connectionId: String, peripheralUuid: String, psm: UInt32)
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceL2CapDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceL2CapDelegate = .init(
        openL2capConnection: { (
            uniffiHandle: UInt64,
            connectionId: RustBuffer,
            peripheralUuid: RustBuffer,
            psm: UInt32,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceL2CapDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.openL2capConnection(
                    connectionId: FfiConverterString.lift(connectionId),
                    peripheralUuid: FfiConverterString.lift(peripheralUuid),
                    psm: FfiConverterUInt32.lift(psm)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceL2CapDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface L2CapDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitL2CapDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_l2capdelegate(&UniffiCallbackInterfaceL2CapDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceL2CapDelegate {
    fileprivate static var handleMap = UniffiHandleMap<L2CapDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceL2CapDelegate: FfiConverter {
    typealias SwiftType = L2CapDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol NativeStreamDelegate: AnyObject {
    func read(bufferLength: UInt64) -> Data

    func write(data: Data) -> UInt64

    func flush()

    func disconnect()
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceNativeStreamDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceNativeStreamDelegate = .init(
        read: { (
            uniffiHandle: UInt64,
            bufferLength: UInt64,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Data in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceNativeStreamDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.read(
                    bufferLength: FfiConverterUInt64.lift(bufferLength)
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterData.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        write: { (
            uniffiHandle: UInt64,
            data: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<UInt64>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> UInt64 in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceNativeStreamDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.write(
                    data: FfiConverterData.lift(data)
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterUInt64.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        flush: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceNativeStreamDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.flush(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        disconnect: { (
            uniffiHandle: UInt64,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceNativeStreamDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.disconnect(
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceNativeStreamDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface NativeStreamDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitNativeStreamDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_nativestreamdelegate(&UniffiCallbackInterfaceNativeStreamDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceNativeStreamDelegate {
    fileprivate static var handleMap = UniffiHandleMap<NativeStreamDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceNativeStreamDelegate: FfiConverter {
    typealias SwiftType = NativeStreamDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol NearbyConnectionDelegate: AnyObject {
    func receivedConnectionRequest(request: ConnectionRequest)
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceNearbyConnectionDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceNearbyConnectionDelegate = .init(
        receivedConnectionRequest: { (
            uniffiHandle: UInt64,
            request: UnsafeMutableRawPointer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceNearbyConnectionDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.receivedConnectionRequest(
                    request: FfiConverterTypeConnectionRequest.lift(request)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceNearbyConnectionDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface NearbyConnectionDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitNearbyConnectionDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_nearbyconnectiondelegate(&UniffiCallbackInterfaceNearbyConnectionDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceNearbyConnectionDelegate {
    fileprivate static var handleMap = UniffiHandleMap<NearbyConnectionDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceNearbyConnectionDelegate: FfiConverter {
    typealias SwiftType = NearbyConnectionDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol NearbyInstantReceiveDelegate: AnyObject {
    func requestedInstantFileReceive(device: Device, requestId: String) -> Bool
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceNearbyInstantReceiveDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceNearbyInstantReceiveDelegate = .init(
        requestedInstantFileReceive: { (
            uniffiHandle: UInt64,
            device: RustBuffer,
            requestId: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<Int8>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> Bool in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceNearbyInstantReceiveDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.requestedInstantFileReceive(
                    device: FfiConverterTypeDevice.lift(device),
                    requestId: FfiConverterString.lift(requestId)
                )
            }

            let writeReturn = { uniffiOutReturn.pointee = FfiConverterBool.lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceNearbyInstantReceiveDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface NearbyInstantReceiveDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitNearbyInstantReceiveDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_nearbyinstantreceivedelegate(&UniffiCallbackInterfaceNearbyInstantReceiveDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceNearbyInstantReceiveDelegate {
    fileprivate static var handleMap = UniffiHandleMap<NearbyInstantReceiveDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceNearbyInstantReceiveDelegate: FfiConverter {
    typealias SwiftType = NearbyInstantReceiveDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol ReceiveProgressDelegate: AnyObject {
    func progressChanged(progress: ReceiveProgressState)
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceReceiveProgressDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceReceiveProgressDelegate = .init(
        progressChanged: { (
            uniffiHandle: UInt64,
            progress: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceReceiveProgressDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.progressChanged(
                    progress: FfiConverterTypeReceiveProgressState.lift(progress)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceReceiveProgressDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface ReceiveProgressDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitReceiveProgressDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_receiveprogressdelegate(&UniffiCallbackInterfaceReceiveProgressDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceReceiveProgressDelegate {
    fileprivate static var handleMap = UniffiHandleMap<ReceiveProgressDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceReceiveProgressDelegate: FfiConverter {
    typealias SwiftType = ReceiveProgressDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol SendProgressDelegate: AnyObject {
    func progressChanged(progress: SendProgressState)
}

// Put the implementation in a struct so we don't pollute the top-level namespace
private enum UniffiCallbackInterfaceSendProgressDelegate {
    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    static var vtable: UniffiVTableCallbackInterfaceSendProgressDelegate = .init(
        progressChanged: { (
            uniffiHandle: UInt64,
            progress: RustBuffer,
            _: UnsafeMutableRawPointer,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws in
                guard let uniffiObj = try? FfiConverterCallbackInterfaceSendProgressDelegate.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.progressChanged(
                    progress: FfiConverterTypeSendProgressState.lift(progress)
                )
            }

            let writeReturn = { () }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) in
            let result = try? FfiConverterCallbackInterfaceSendProgressDelegate.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface SendProgressDelegate: handle missing in uniffiFree")
            }
        }
    )
}

private func uniffiCallbackInitSendProgressDelegate() {
    uniffi_intershare_sdk_fn_init_callback_vtable_sendprogressdelegate(&UniffiCallbackInterfaceSendProgressDelegate.vtable)
}

// FfiConverter protocol for callback interfaces
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private enum FfiConverterCallbackInterfaceSendProgressDelegate {
    fileprivate static var handleMap = UniffiHandleMap<SendProgressDelegate>()
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
extension FfiConverterCallbackInterfaceSendProgressDelegate: FfiConverter {
    typealias SwiftType = SendProgressDelegate
    typealias FfiType = UInt64

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ handle: UInt64) throws -> SwiftType {
        try handleMap.get(handle: handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UInt64 = try readInt(&buf)
        return try lift(handle)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ v: SwiftType) -> UInt64 {
        return handleMap.insert(obj: v)
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeClipboardTransferIntent: FfiConverterRustBuffer {
    typealias SwiftType = ClipboardTransferIntent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeClipboardTransferIntent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeClipboardTransferIntent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeFileTransferIntent: FfiConverterRustBuffer {
    typealias SwiftType = FileTransferIntent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFileTransferIntent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFileTransferIntent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionCallbackInterfaceDeviceListUpdateDelegate: FfiConverterRustBuffer {
    typealias SwiftType = DeviceListUpdateDelegate?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceDeviceListUpdateDelegate.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceDeviceListUpdateDelegate.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionCallbackInterfaceNearbyConnectionDelegate: FfiConverterRustBuffer {
    typealias SwiftType = NearbyConnectionDelegate?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceNearbyConnectionDelegate.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceNearbyConnectionDelegate.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionCallbackInterfaceSendProgressDelegate: FfiConverterRustBuffer {
    typealias SwiftType = SendProgressDelegate?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterCallbackInterfaceSendProgressDelegate.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterCallbackInterfaceSendProgressDelegate.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeDevice: FfiConverterRustBuffer {
    typealias SwiftType = [Device]

    public static func write(_ value: [Device], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDevice.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Device] {
        let len: Int32 = try readInt(&buf)
        var seq = [Device]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeDevice.read(from: &buf))
        }
        return seq
    }
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

private let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> Void,
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

public func getBleDiscoveryCharacteristicUuid() -> String {
    return try! FfiConverterString.lift(try! rustCall {
        uniffi_intershare_sdk_fn_func_get_ble_discovery_characteristic_uuid($0
        )
    })
}

public func getBleServiceUuid() -> String {
    return try! FfiConverterString.lift(try! rustCall {
        uniffi_intershare_sdk_fn_func_get_ble_service_uuid($0
        )
    })
}

public func getLogFilePathStr() -> String? {
    return try! FfiConverterOptionString.lift(try! rustCall {
        uniffi_intershare_sdk_fn_func_get_log_file_path_str($0
        )
    })
}

public func handleIncomingL2capConnection(connectionId: String, nativeStream: NativeStreamDelegate) async {
    return
        try! await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_intershare_sdk_fn_func_handle_incoming_l2cap_connection(FfiConverterString.lower(connectionId), FfiConverterCallbackInterfaceNativeStreamDelegate.lower(nativeStream))
            },
            pollFunc: ffi_intershare_sdk_rust_future_poll_void,
            completeFunc: ffi_intershare_sdk_rust_future_complete_void,
            freeFunc: ffi_intershare_sdk_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: nil
        )
}

public func isCompatible(device: Device) -> VersionCompatibility {
    return try! FfiConverterTypeVersionCompatibility.lift(try! rustCall {
        uniffi_intershare_sdk_fn_func_is_compatible(
            FfiConverterTypeDevice.lower(device), $0
        )
    })
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_intershare_sdk_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_intershare_sdk_checksum_func_get_ble_discovery_characteristic_uuid() != 41174 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_func_get_ble_service_uuid() != 559 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_func_get_log_file_path_str() != 8890 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_func_handle_incoming_l2cap_connection() != 31719 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_func_is_compatible() != 556 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_sharestore_generate_link() != 64960 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_sharestore_generate_qr_code() != 5886 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_sharestore_send_to() != 8676 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_accept() != 46730 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_cancel() != 56275 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_decline() != 58832 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_get_clipboard_intent() != 18496 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_get_file_transfer_intent() != 5345 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_get_intent_type() != 2989 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_get_sender() != 48559 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_is_link() != 12597 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_set_progress_delegate() != 13934 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_connectionrequest_update_progress() != 27929 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internaldiscovery_add_ble_implementation() != 59819 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internaldiscovery_add_discovered_device() != 37791 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internaldiscovery_get_devices() != 48460 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internaldiscovery_parse_discovery_message() != 14241 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internaldiscovery_remove_discovered_device() != 12235 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internaldiscovery_start() != 23215 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internaldiscovery_stop() != 40747 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_add_bluetooth_implementation() != 49906 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_add_l2_cap_client() != 5582 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_change_device() != 58267 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_advertisement_data() != 38682 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_current_ip() != 14506 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_get_device_name() != 3575 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_handle_incoming_connection() != 3472 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_request_download() != 30179 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_restart_server() != 27750 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_set_bluetooth_le_details() != 26840 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_set_tcp_details() != 26689 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_share_files() != 4379 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_share_text() != 58097 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_start() != 22669 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_internalnearbyserver_stop() != 61145 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_constructor_internaldiscovery_new() != 23617 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_constructor_internalnearbyserver_new() != 19836 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_sendprogressdelegate_progress_changed() != 8737 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_blediscoveryimplementationdelegate_start_scanning() != 21660 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_blediscoveryimplementationdelegate_stop_scanning() != 45974 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_bleserverimplementationdelegate_start_server() != 55538 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_bleserverimplementationdelegate_stop_server() != 27900 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_devicelistupdatedelegate_device_added() != 23168 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_devicelistupdatedelegate_device_removed() != 11370 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_l2capdelegate_open_l2cap_connection() != 35884 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_nativestreamdelegate_read() != 15627 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_nativestreamdelegate_write() != 32491 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_nativestreamdelegate_flush() != 65506 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_nativestreamdelegate_disconnect() != 27809 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_nearbyconnectiondelegate_received_connection_request() != 38378 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_nearbyinstantreceivedelegate_requested_instant_file_receive() != 55638 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_intershare_sdk_checksum_method_receiveprogressdelegate_progress_changed() != 42587 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitBleDiscoveryImplementationDelegate()
    uniffiCallbackInitBleServerImplementationDelegate()
    uniffiCallbackInitDeviceListUpdateDelegate()
    uniffiCallbackInitL2CapDelegate()
    uniffiCallbackInitNativeStreamDelegate()
    uniffiCallbackInitNearbyConnectionDelegate()
    uniffiCallbackInitNearbyInstantReceiveDelegate()
    uniffiCallbackInitReceiveProgressDelegate()
    uniffiCallbackInitSendProgressDelegate()
    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
